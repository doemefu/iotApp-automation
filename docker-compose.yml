version: "3.9"

services:
  # -----------------------------------------------------
  # 1) POSTGRESQL
  # -----------------------------------------------------
  postgres:
    image: postgres:17-alpine
    container_name: iotapp_postgres
    restart: always
      #networks:
    #- iot-network
    environment:
      TZ: ${TZ}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres/postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"

  # -----------------------------------------------------
  # 2) INFLUXDB
  # -----------------------------------------------------
  influxdb:
    image: influxdb:2-alpine
    container_name: iotapp_influxdb
    restart: always
      #networks:
    #- iot-network
    environment:
      TZ: ${TZ}
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET}
      # DOCKER_INFLUXDB_INIT_RETENTION: 30d
    volumes:
      - ./influx/influx_data:/var/lib/influxdb2
      - ./influx/influx_config:/etc/influxdb2
      #- ./influx/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${INFLUX_PORT}:8086"

  # -----------------------------------------------------
  # 2.1) INFLUXDB SETUP SCRIPT
  # -----------------------------------------------------
  influx-init:
    image: curlimages/curl:latest
    depends_on:
      - influxdb
    command: ["/bin/sh", "-c", "/create-buckets.sh"]
    volumes:
      - ./scripts/create-buckets.sh:/create-buckets.sh
    environment:
      INFLUX_HOST: ${INFLUX_HOST}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN}

  # -----------------------------------------------------
  # 3) MOSQUITTO (MQTT BROKER)
  # -----------------------------------------------------
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: iotapp_mosquitto
    restart: always
      #networks:
    #- iot-network
    volumes:
      - ./mosquitto/mosquitto_config:/mosquitto/config
      - ./mosquitto/mosquitto_data:/mosquitto/data
      - ./mosquitto/mosquitto_log:/mosquitto/log
    ports:
      - "${MQTT_PORT}:1883"   # MQTT
      - "${MQTT_WS_PORT}:9001"   # WebSocket MQTT (if needed)
    # If you want to customize Mosquitto config:
    # configs:
    #   - source: mosquitto_custom_config
    #     target: /mosquitto/config/mosquitto.conf

  # -----------------------------------------------------
  # 4) USER MANAGEMENT SERVICE
  # -----------------------------------------------------
  user-management-service:
    build:
      context: ../user-management-service #Path to dockerfile
      dockerfile: Dockerfile
    container_name: iotapp_user_management
    restart: unless-stopped
      #networks:
    #- iot-network
    depends_on:
      - postgres
    environment:
      # Example environment variables for connecting to Postgres
      LOGGING_LEVEL_ROOT: DEBUG
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      INFLUX_URL: ${INFLUX_HOST}
      INFLUX_BUCKET: ${USER_MANAGEMENT_BUCKET}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      # Other environment variables as needed
    ports:
      - "${USER_MANAGEMENT_PORT}:8080"  # Expose the service on host port

  # -----------------------------------------------------
  # 5) AUTH SERVICE
  # -----------------------------------------------------
  auth-service:
    build:
      context: ../auth-service #Path to dockerfile
      dockerfile: Dockerfile
    container_name: iotapp_auth
    restart: unless-stopped
      #networks:
    #- iot-network
    depends_on:
      - user-management-service
      - postgres
    environment:
      # Adjust as needed
      LOGGING_LEVEL_ROOT: DEBUG
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${AUTH_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # For validating users (if calling user-management-service):
      USER_MANAGEMENT_SERVICE_URL: ${USER_MANAGEMENT_SERVICE_URL}
      INFLUX_URL: ${INFLUX_HOST}
      INFLUX_BUCKET: ${AUTH_SERVICE_BUCKET}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      # JWT settings, etc.
    ports:
      - "${AUTH_SERVICE_PORT}:8080"

  # -----------------------------------------------------
  # 6) DEVICE MANAGEMENT SERVICE
  # -----------------------------------------------------
  device-management-service:
    build: ./device-management-service
    container_name: iotapp_device_management
    restart: unless-stopped
      #networks:
    #- iot-network
    depends_on:
      - mosquitto
      - auth-service
      - postgres
    environment:
      # If you store device info in Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # MQTT broker connection info
      MQTT_BROKER_HOST: ${MQTT_BROKER_HOST}
      MQTT_BROKER_PORT: ${MQTT_PORT}
      # Auth service if validating JWT
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
    ports:
      - "${DEVICE_MANAGEMENT_PORT}:8080"

  # -----------------------------------------------------
  # 7) DATA PROCESSING SERVICE
  # -----------------------------------------------------
  data-processing-service:
    build: ./data-processing-service
    container_name: iotapp_data_processing
    restart: unless-stopped
      #networks:
    #- iot-network
    depends_on:
      - influxdb
      - device-management-service
    environment:
      # InfluxDB connection info
      INFLUXDB_URL: ${INFLUX_URL}
      INFLUXDB_TOKEN: ${INFLUX_TOKEN}
      INFLUXDB_ORG: ${INFLUX_ORG}
      INFLUXDB_BUCKET: ${DATA_PROCESSING_BUCKET}
